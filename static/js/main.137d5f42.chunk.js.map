{"version":3,"sources":["components/Tag.tsx","components/NavBar.tsx","helpers/constants.ts","helpers/index.ts","components/ImageGrid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","Tag","props","selected","tag","onClick","isSelected","variant","undefined","value","ThemeProvider","Button","size","color","disableElevation","useStyles","makeStyles","createStyles","root","flexGrow","appBar","common","white","backgroundColor","black","title","alignItems","NavBar","setTag","classes","className","AppBar","position","Toolbar","Typography","images","getMetadata","img","items","split","id","place","country","region","tags","display","flexWrap","justifyContent","overflow","background","paper","gridList","transform","titleBar","tile","height","icon","withWidth","width","images_with_meta","map","filter","image_meta","includes","getImages","GridList","cols","spacing","index","isWidthDown","rows","calculateColsRows","GridListTile","key","src","alt","join","GridListTileBar","subtitle","text","tag_index","titlePosition","App","setState","state","this","ImageGrid","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2UAQMA,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,cAuBGC,EAbH,SAACC,GAAkB,IACrBC,EAA2BD,EAA3BC,SAAUC,EAAiBF,EAAjBE,IAAKC,EAAYH,EAAZG,QACjBC,EAAaH,IAAaC,EAE1BG,EAAUD,EAAa,iBAAcE,EACrCC,EAASH,EAAmB,GAANF,EAC5B,OACE,kBAACM,EAAA,EAAD,CAAed,MAAOA,GACpB,kBAACe,EAAA,EAAD,CAAQC,KAAK,QAAQC,MALV,UAKwBN,QAASA,EAASF,QAAS,kBAAMA,EAAQI,IAAQK,kBAAgB,GAApG,KAAyGV,EAAzG,OClBAW,EAAYC,aAAW,SAACpB,GAAD,OAC3BqB,YAAa,CACXC,KAAM,CACJC,SAAU,GAEZC,OAAQ,CACNP,MAAOjB,EAAME,QAAQuB,OAAOC,MAC5BC,gBAAiB3B,EAAME,QAAQuB,OAAOG,OAExCC,MAAO,CACLC,WAAY,QACZP,SAAU,QAKD,SAASQ,EAAOzB,GAAe,IACrC0B,EAAe1B,EAAf0B,OAAQxB,EAAOF,EAAPE,IACTyB,EAAUd,IAChB,OACE,yBAAKe,UAAWD,EAAQX,MACtB,kBAACa,EAAA,EAAD,CAAQD,UAAWD,EAAQT,OAAQP,MAAM,UAAUmB,SAAS,SAASzB,QAAQ,aAC3E,kBAAC0B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAY3B,QAAQ,KAAKuB,UAAWD,EAAQJ,OAA5C,cAGA,kBAACS,EAAA,EAAD,KACG9B,GAAO,kBAAC,EAAD,CAAKA,IAAKA,EAAKD,SAAUC,EAAKC,QAASuB,Q,oCCtC9CO,EAAS,CACpB,+GACA,qGACA,yGACA,yGACA,8GACA,yGACA,0GACA,mGACA,qGACA,mGACA,wGACA,kGACA,qGACA,yGAdoB,sGAgBpB,iHCLWC,EAAc,SAACC,GAC1B,IACMC,EAAUD,EAAIE,MADP,oEACmB,GAAIA,MAAM,OAAO,GAAIA,MAAM,KAC3D,MAAO,CACLC,GAAIF,EAAM,GACVD,MACAI,MAAOH,EAAM,GACbI,QAASJ,EAAM,GACfK,OAAQL,EAAM,GACdM,KAAM,CAACN,EAAM,GAAIA,EAAM,GAAIA,EAAM,MCL/BvB,EAAYC,aAAW,SAACpB,GAAD,OAC3BqB,YAAa,CACXC,KAAM,CACJ2B,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBrB,WAAY,SACZsB,SAAU,SACVzB,gBAAiB3B,EAAME,QAAQmD,WAAWC,OAE5CC,SAAU,CAERC,UAAW,iBAEbC,SAAU,CACRJ,WACE,2FAGJK,KAAM,CACJC,OAAQ,SAEVC,KAAM,CACJ3C,MAAO,cAmDE4C,qBA1Bf,SAA0BvD,GACxB,IAAM2B,EAAUd,IACT2C,EAAsBxD,EAAtBwD,MAAO9B,EAAe1B,EAAf0B,OAAQxB,EAAOF,EAAPE,IAChB+B,ED1CiB,SAAC/B,GACxB,IAAMuD,EAAmBxB,EAAOyB,IAAIxB,GACpC,OAAKhC,EAGEuD,EAAiBE,QAAO,SAACC,GAAD,OAA2BA,EAAWlB,KAAKmB,SAAS3D,MAF1EuD,ECuCMK,CAAU5D,GACzB,OACE,yBAAK0B,UAAWD,EAAQX,MACtB,kBAAC+C,EAAA,EAAD,CAAUC,KAAM,GAAIC,QAAS,EAAGrC,UAAWD,EAAQsB,UAChDhB,EAAOyB,KAAI,SAACN,EAAiBc,GAAmB,IAAD,EA3B9B,SAACV,EAAYU,GACrC,GAAIC,YAAY,KAAMX,GACpB,MAAO,CAAEQ,KAAM,GAAII,KAAM,GAG3B,OADmBF,EAAQ,IAEzB,KAAK,EACL,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,CAAEF,KAAM,EAAGI,KAAM,GAC1B,KAAK,EACL,KAAK,EACL,KAAK,EACH,MAAO,CAAEJ,KAAM,EAAGI,KAAM,GAC1B,QACE,MAAO,CAAEJ,KAAM,GAAII,KAAM,IAYEC,CAAkBb,EAAOU,GAAxCF,EADsC,EACtCA,KAAMI,EADgC,EAChCA,KACd,OACE,kBAACE,EAAA,EAAD,CAAc1C,UAAWD,EAAQyB,KAAMmB,IAAG,UAAKL,EAAL,YAAcd,EAAKjB,KAAO6B,KAAMA,EAAMI,KAAMA,GACpF,yBAAKI,IAAKpB,EAAKjB,IAAKsC,IAAG,UAAKrB,EAAKd,GAAV,YAAgBc,EAAKV,KAAKgC,KAAK,QACtD,kBAACC,EAAA,EAAD,CACEpD,MAAO6B,EAAKd,GACZsC,SAAUxB,EAAKV,KAAKgB,KAAI,SAACmB,EAAcC,GAAf,OAAqC,kBAAC,EAAD,CAAKP,IAAG,UAAKrE,EAAL,YAAY4E,GAAa5E,IAAK2E,EAAM5E,SAAUC,EAAKC,QAASuB,OACjIqD,cAAc,MACdnD,UAAWD,EAAQwB,oBC/CpB6B,E,kDAtBb,WAAYhF,GAAa,IAAD,8BACtB,cAAMA,IAMR0B,OAAS,SAACxB,GACR,EAAK+E,SAAS,CAAC/E,SANf,EAAKgF,MAAQ,CACXhF,SAAKI,GAHe,E,qDAWd,IACDJ,EAAOiF,KAAKD,MAAZhF,IACP,OACE,6BACE,kBAACuB,EAAD,CAAQvB,IAAKA,EAAKwB,OAAQyD,KAAKzD,SAC/B,kBAAC0D,EAAD,CAAWlF,IAAKA,EAAKwB,OAAQyD,KAAKzD,c,GAjBxB2D,IAAMC,WCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.137d5f42.chunk.js","sourcesContent":["import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport {\n  createMuiTheme,\n  ThemeProvider,\n} from '@material-ui/core/styles';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#ffffff'\n    },\n  },\n});\n\ninterface Props {\n  selected?: string;\n  tag: string;\n  onClick: (tag?: string) => void;\n}\nconst Tag = (props: Props) => {\n  const { selected, tag, onClick } = props;\n  const isSelected = selected === tag;\n  const color =  'primary';\n  const variant = isSelected ? 'contained' : undefined;\n  const value = !isSelected ? tag : '';\n  return (\n    <ThemeProvider theme={theme}>\n      <Button size=\"small\" color={color} variant={variant} onClick={() => onClick(value)} disableElevation > #{tag} </Button>\n    </ThemeProvider>\n  );\n};\n\nexport default Tag; ","import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Tag from './Tag';\ninterface Props {\n  setTag: () => void;\n  tag?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    appBar: {\n      color: theme.palette.common.white,\n      backgroundColor: theme.palette.common.black\n    },\n    title: {\n      alignItems: 'right',\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function NavBar(props: Props) {\n  const {setTag, tag} = props;\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appBar} color=\"inherit\" position=\"static\" variant=\"elevation\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            sumcho.com\n          </Typography>\n          <Typography>\n            {tag && <Tag tag={tag} selected={tag} onClick={setTag} />}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","export const images = [\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/16_PeritoMoreno_Argentina_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/15_Chiloe_Chile_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/14_Manhattan_Newyork_Northamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/13_Iguazu_Argentina_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/12_LagoAtitlan_Guatemala_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/11_Mojave_California_Northamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/10_Comuna13_Colombia_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/09_ElMedano_Canarias_Europe.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/08_BocaChica_RD_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/07_Tenerife_Canarias_Europe.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/06_SenhorDaPedra_Portugal_Europe.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/05_AbuDhabi_UAE_MiddleEast.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/04_Tulum_Mexico_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/03_MachuPicchu_Peru_Latinoamerica.jpeg',\n  `https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/02_Bar'am_Palestine_MiddleEast.jpeg`,\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/01_ValleDelCocora_Colombia_Latinoamerica.jpeg'\n];","import { images } from './constants';\n\nexport interface ImageMeta {\n  id: string;\n  img: string;\n  place: string;\n  country: string;\n  region: string;\n  tags: string[];\n}\n\nexport const getMetadata = (img: string): ImageMeta => {\n  const base = 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/';\n  const items = ((img.split(base)[1]).split('.jp')[0]).split('_');\n  return {\n    id: items[0],\n    img,\n    place: items[1],\n    country: items[2],\n    region: items[3],\n    tags: [items[1], items[2], items[3]]\n  };\n};\n\nexport const getImages = (tag?: string) => {\n  const images_with_meta = images.map(getMetadata);\n  if (!tag) {\n    return images_with_meta;\n  }\n  return images_with_meta.filter((image_meta: ImageMeta) => image_meta.tags.includes(tag));\n}\n","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport withWidth, { isWidthDown } from '@material-ui/core/withWidth';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Tag from './Tag';\nimport { getImages, ImageMeta } from '../helpers';\n\ninterface Props {\n  setTag: (tag?: string) => void;\n  tag?: string;\n  width: any;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-evenly',\n      alignItems: 'strech',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: 'translateZ(0)',\n    },\n    titleBar: {\n      background:\n        'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n        'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    tile: {\n      height: '200px'\n    },\n    icon: {\n      color: 'white',\n    },\n  }),\n);\n\nconst calculateColsRows = (width: any, index: number): { cols: any, rows: number } => {\n  if (isWidthDown('sm', width)) {\n    return { cols: 12, rows: 2 };\n  }\n  const last_digit = index % 10;\n  switch (last_digit) {\n    case 1:\n    case 2:\n    case 8:\n    case 9:\n      return { cols: 6, rows: 3 };\n    case 4:\n    case 5:\n    case 6:\n      return { cols: 4, rows: 2 };\n    default:\n      return { cols: 12, rows: 4 };\n  }\n};\n\nfunction AdvancedGridList(props: Props) {\n  const classes = useStyles();\n  const {width, setTag, tag} = props;\n  const images = getImages(tag);\n  return (\n    <div className={classes.root}>\n      <GridList cols={12} spacing={1} className={classes.gridList}>\n        {images.map((tile: ImageMeta, index: number) => {\n          const { cols, rows } = calculateColsRows(width, index);\n          return (\n            <GridListTile className={classes.tile} key={`${index}_${tile.img}`} cols={cols} rows={rows}>\n              <img src={tile.img} alt={`${tile.id}_${tile.tags.join('_')}`} />\n              <GridListTileBar\n                title={tile.id}\n                subtitle={tile.tags.map((text: string, tag_index: number) => <Tag key={`${tag}_${tag_index}`} tag={text} selected={tag} onClick={setTag} />)}\n                titlePosition=\"top\"\n                className={classes.titleBar}\n              />\n            </GridListTile>\n          );\n        })}\n      </GridList>\n    </div>\n  );\n}\n\nexport default withWidth()(AdvancedGridList);","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport ImageGrid from './components/ImageGrid';\n\ninterface State {\n  tag?: string;\n}\n\nclass App extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      tag: undefined\n    };\n  }\n\n  setTag = (tag?: string) => {\n    this.setState({tag});\n  };\n  \n  render() {\n    const {tag} = this.state;\n    return (\n      <div>\n        <NavBar tag={tag} setTag={this.setTag}/>\n        <ImageGrid tag={tag} setTag={this.setTag}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}