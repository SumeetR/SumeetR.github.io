{"version":3,"sources":["components/NavBar.tsx","components/Tag.tsx","helpers/constants.ts","helpers/index.ts","components/ImageGrid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","appBar","color","palette","common","white","backgroundColor","black","title","alignItems","NavBar","props","setTag","tag","classes","className","AppBar","position","variant","Toolbar","Typography","onClick","Tag","images","getMetadata","img","items","split","id","place","country","region","tags","display","flexWrap","justifyContent","overflow","background","paper","gridList","transform","titleBar","tile","height","icon","withWidth","width","images_with_meta","map","filter","image_meta","includes","getImages","GridList","cols","spacing","index","isWidthDown","rows","calculateColsRows","GridListTile","key","src","alt","join","GridListTileBar","subtitle","tag_index","titlePosition","App","setState","state","undefined","this","ImageGrid","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fe853b5.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Props {\n  setTag: () => void;\n  tag?: string;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    appBar: {\n      color: theme.palette.common.white,\n      backgroundColor: theme.palette.common.black\n    },\n    title: {\n      alignItems: 'right',\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function NavBar(props: Props) {\n  const {setTag, tag} = props;\n  const classes = useStyles();\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appBar} color=\"inherit\" position=\"static\" variant=\"elevation\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            sumcho.com\n          </Typography>\n          <Typography>\n            {tag ? 'Selected: #' : ''}{tag} {tag ? <button onClick={() => setTag()}>x</button> : ''}\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","import React from 'react';\n\nconst Tag = (props: { tag: string, onClick: (tag: string) => void }) => {\n  const { tag, onClick } = props;\n  return <button onClick={() => onClick(tag)}> #{tag} </button>;\n};\n\nexport default Tag; ","export const images = [\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/08_BocaChica_RD_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/07_Canarias_Spain_Europe.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/06_SenhorDaPedra_Portugal_Europe.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/05_AbuDhabi_UAE_MiddleEast.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/04_Tulum_Mexico_Latinoamerica.jpeg',\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/03_MachuPicchu_Peru_Latinoamerica.jpeg',\n  `https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/02_Bar'am_Palestine_MiddleEast.jpeg`,\n  'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/01_ValleDelCocora_Colombia_Latinoamerica.jpeg'\n];","import { images } from './constants';\n\nexport interface ImageMeta {\n  id: string;\n  img: string;\n  place: string;\n  country: string;\n  region: string;\n  tags: string[];\n}\n\nexport const getMetadata = (img: string): ImageMeta => {\n  const base = 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/';\n  const items = ((img.split(base)[1]).split('.jp')[0]).split('_');\n  return {\n    id: items[0],\n    img,\n    place: items[1],\n    country: items[2],\n    region: items[3],\n    tags: [items[1], items[2], items[3]]\n  };\n};\n\nexport const getImages = (tag?: string) => {\n  const images_with_meta = images.map(getMetadata);\n  if (!tag) {\n    return images_with_meta;\n  }\n  return images_with_meta.filter((image_meta: ImageMeta) => image_meta.tags.includes(tag));\n}\n","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport withWidth, { isWidthDown } from '@material-ui/core/withWidth';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport Tag from './Tag';\nimport { getImages, ImageMeta } from '../helpers';\n\ninterface Props {\n  setTag: (tag?: string) => void;\n  tag?: string;\n  width: any;\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-evenly',\n      alignItems: 'strech',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: 'translateZ(0)',\n    },\n    titleBar: {\n      background:\n        'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n        'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    tile: {\n      height: '200px'\n    },\n    icon: {\n      color: 'white',\n    },\n  }),\n);\n\nconst calculateColsRows = (width: any, index: number): { cols: any, rows: number } => {\n  if (isWidthDown('sm', width)) {\n    return { cols: 12, rows: 2 };\n  }\n  const last_digit = index % 10;\n  switch (last_digit) {\n    case 1:\n    case 2:\n    case 8:\n    case 9:\n      return { cols: 6, rows: 3 };\n    case 4:\n    case 5:\n    case 6:\n      return { cols: 4, rows: 2 };\n    default:\n      return { cols: 12, rows: 4 };\n  }\n};\n\nfunction AdvancedGridList(props: Props) {\n  const classes = useStyles();\n  const {width, setTag, tag} = props;\n  const images = getImages(tag);\n  return (\n    <div className={classes.root}>\n      <GridList cols={12} spacing={1} className={classes.gridList}>\n        {images.map((tile: ImageMeta, index: number) => {\n          const { cols, rows } = calculateColsRows(width, index);\n          return (\n            <GridListTile className={classes.tile} key={`${index}_${tile.img}`} cols={cols} rows={rows}>\n              <img src={tile.img} alt={`${tile.id}_${tile.tags.join('_')}`} />\n              <GridListTileBar\n                title={tile.id}\n                subtitle={tile.tags.map((tag: string, tag_index: number) => <Tag key={`${tag}_${tag_index}`} tag={tag} onClick={setTag} />)}\n                titlePosition=\"top\"\n                className={classes.titleBar}\n              />\n            </GridListTile>\n          );\n        })}\n      </GridList>\n    </div>\n  );\n}\n\nexport default withWidth()(AdvancedGridList);","import React from 'react';\nimport './App.css';\nimport NavBar from './components/NavBar';\nimport ImageGrid from './components/ImageGrid';\n\ninterface State {\n  tag?: string;\n}\n\nclass App extends React.Component<{}, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      tag: undefined\n    };\n  }\n\n  setTag = (tag?: string) => {\n    this.setState({tag});\n  };\n  \n  render() {\n    const {tag} = this.state;\n    return (\n      <div>\n        <NavBar tag={tag} setTag={this.setTag}/>\n        <ImageGrid tag={tag} setTag={this.setTag}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}