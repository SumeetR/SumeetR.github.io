{"version":3,"sources":["NavBar.tsx","constants.ts","ImageGrid.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","flexGrow","appBar","color","palette","common","white","backgroundColor","black","title","alignItems","NavBar","classes","className","AppBar","position","variant","Toolbar","Typography","images","img","display","flexWrap","justifyContent","overflow","background","paper","gridList","transform","titleBar","tile","height","icon","withWidth","props","width","GridList","cellHeight","cols","spacing","map","index","isWidthDown","rows","calculateColsRows","details","items","split","id","place","country","region","tags","getMetadata","GridListTile","key","src","alt","join","GridListTileBar","subtitle","tag","tag_index","titlePosition","App","ImageGrid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e473175d.chunk.js","sourcesContent":["import React from 'react';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    appBar: {\n      color: theme.palette.common.white,\n      backgroundColor: theme.palette.common.black\n    },\n    title: {\n      alignItems: 'right',\n      flexGrow: 1,\n    },\n  }),\n);\n\nexport default function NavBar() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <AppBar className={classes.appBar} color=\"inherit\" position=\"static\" variant=\"elevation\">\n        <Toolbar>\n          <Typography variant=\"h6\" className={classes.title}>\n            sumcho.com\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}","export const images = [\n  {\n    img: 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/07_Canarias_Spain_Europe.jpeg'\n  },\n  {\n    img: 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/06_SenhorDaPedra_Portugal_Europe.jpeg'\n  },\n  {\n    img: 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/05_AbuDhabi_UAE_MiddleEast.jpeg'\n  },\n  {\n    img: 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/04_Tulum_Mexico_Latinoamerica.jpeg'\n  },\n  {\n    img: 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/03_MachuPicchu_Peru_Latinoamerica.jpeg'\n  },\n  {\n    img: `https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/02_Bar'am_Palestine_MiddleEast.jpeg`\n  },\n  {\n    img: 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/01_ValleDelCocora_Colombia_Latinoamerica.jpeg'\n  }\n];","import React from 'react';\nimport { createStyles, Theme, makeStyles } from '@material-ui/core/styles';\nimport withWidth, { isWidthDown } from '@material-ui/core/withWidth';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport { images } from './constants';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-evenly',\n      alignItems: 'strech',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: 'translateZ(0)',\n    },\n    titleBar: {\n      background:\n        'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n        'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n    },\n    tile: {\n      height: '200px'\n    },\n    icon: {\n      color: 'white',\n    },\n  }),\n);\n\nconst getMetadata = (img: string) => {\n  const base = 'https://sumcho-dot-com-images.s3-eu-west-1.amazonaws.com/images/';\n  const items = ((img.split(base)[1]).split('.jpeg')[0]).split('_');\n  return {\n    id: items[0],\n    place: items[1],\n    country: items[2],\n    region: items[3],\n    tags: [items[1], items[2], items[3]]\n  };\n};\n\nconst calculateColsRows = (width: any, index: number): { cols: any, rows: number } => {\n  if (isWidthDown('sm', width)) {\n    return { cols: 12, rows: 5 };\n  }\n  const last_digit = index % 10;\n  switch (last_digit) {\n    case 1:\n    case 2:\n    case 8:\n    case 9:\n      return { cols: 6, rows: 5 };\n    case 4:\n    case 5:\n    case 6:\n      return { cols: 4, rows: 3 };\n    default:\n      return { cols: 12, rows: 10 };\n  }\n};\n\nfunction AdvancedGridList(props: {width: any}) {\n  const classes = useStyles();\n  const {width} = props;\n  return (\n    <div className={classes.root}>\n      <GridList cellHeight={50} cols={12} spacing={1} className={classes.gridList}>\n        {images.map((tile: {img: string}, index: number) => {\n          const { cols, rows } = calculateColsRows(width, index);\n          const details = getMetadata(tile.img);\n          return (\n            <GridListTile className={classes.tile} key={`${index}_${tile.img}`} cols={cols} rows={rows}>\n              <img src={tile.img} alt={`${details.id}_${details.tags.join('_')}`} />\n              <GridListTileBar\n                title={details.id}\n                subtitle={details.tags.map((tag: string, tag_index: number) => <span key={`${tag}_${tag_index}`} > #{tag} </span>)}\n                titlePosition=\"top\"\n                className={classes.titleBar}\n              />\n            </GridListTile>\n          );\n        })}\n      </GridList>\n    </div>\n  );\n}\n\nexport default withWidth()(AdvancedGridList);","import React from 'react';\nimport './App.css';\nimport NavBar from './NavBar';\nimport ImageGrid from './ImageGrid';\n\nfunction App() {\n  return (\n    <div>\n      <NavBar />\n      <ImageGrid />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}